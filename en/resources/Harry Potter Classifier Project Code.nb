(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    128713,       2291]
NotebookOptionsPosition[    127645,       2259]
NotebookOutlinePosition[    127999,       2275]
CellTagsIndexPosition[    127956,       2272]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"potter", " ", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Harry\>\"", " ", "\[Rule]", 
      RowBox[{"Import", "[", 
       RowBox[{
       "\"\<https://www.google.co.uk/search?q=\\\"harry+potter\\\"+\\\"Daniel+\
Radcliffe\\\"&tbm=isch\>\"", ",", "\"\<Images\>\""}], "]"}]}], ",", " ", 
     RowBox[{"\"\<Ron\>\"", " ", "\[Rule]", " ", 
      RowBox[{"Import", "[", 
       RowBox[{
       "\"\<https://www.google.co.uk/search?q=\\\"ron+weasley\\\"+\\\"Rubert+\
Grint\\\"&tbm=isch\>\"", ",", "\"\<Images\>\""}], "]"}]}], ",", " ", 
     RowBox[{"\"\<Hermione\>\"", " ", "\[Rule]", " ", 
      RowBox[{"Import", "[", 
       RowBox[{
       "\"\<https://www.google.co.uk/search?q=\\\"hermione+granger\\\"+\\\"\
emma+watson\\\"&tbm=isch\>\"", ",", "\"\<Images\>\""}], "]"}]}]}], " ", 
    "|>"}], "]"}]}]], "Input",
 CellLabel->"In[68]:=",ExpressionUUID->"a5eee5d1-0a2f-4f34-8fc1-29be8facca88"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Image\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Harry\"", "\"Hermione\"", "\"Ron\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Image\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Harry\"", "\"Hermione\"", "\"Ron\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["60", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 60, "ClassNumber" -> 3, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Image"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Image", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Image"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Image", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]], "Fill" -> 
             Image[CompressedData["
1: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
wJhFJlCsCxFdUVwTdE6BdqwIgmaIEGB7vbDXjXr9oN0OArBjXRXEliAKrMCx
LN1soq2DJE2hPWlNskKilawaTtQaVKFWTaN9EYVsEZ3HyRTyuXIxXypkS6Vs
uZIpw7WcLBZztVqqWIxnAa8c8Gvt4eO1+/fW7q99eXvpxpe3VlaXHzxcRRK6
gzaJAlIQLIFQaN0RRA+d+ULrMGkkgOkEci64K3KJfC6RzZbrRKaCpzE8XcMz
dapANkoEUSYaiFOOyTsap0NYMqwIZNCRLQvIxZu2YFiSYysg+mjYnmsPR91e
2x/63qztH4JDzQaXR/OzvenV8cHLs8M3T08udgdPJ/2Xu8P3h8M/nM9/OBt/
BgbtRT+ejf/74/P//enF//nm6n8+Pf3rs90fTgYfJuGHYfD7w/GbUXDdBw2c
/PD0+PX+4M3x5N3h7N3B5P3F7oeL+fXu8M3++HQY7QfO6TA47oMIWwcdZxzp
ez1v6JqBLmliC4BSIZULHM9SisRH0OzbXjvyok7QBlOG3CsJvMAv9jVRABbR
IHASJ5pkqV5bbO+sY8C3ZjOPYakiOsWTLeWz5Xy2UsyWC5lyIV3Kp8vFdKkI
1AOYstVqHHJjLp9A5Co+XF8HpNYerH19Z+nmV18iZj1YWUQUCCgbmzsbmxAh
IQSiI62LsVjDSqEp3FQSQmAOnYhMFeC7ZUt1Il3GoGelK/U0RqKJQZzM1wla
U9CJGsfgdN3wTLPjKT5gZEi2I5iOoFu8acgQpxzHgExo6pAJ+51o3O0cDvon
w/5hPzqa9fdH/ae7w8ujvevjvRdHs+v9yfuT2cf9yXfnuz9eTH5/1v/dce/7
k/E/3p4CUv/vdy//+93Ff727+MfV4Y/Hk897UIcH7ybt9/Pe96d7b/dH17Pe
6/3h24Phm73Jm5PZm6Pdl3uzN/uTs2nvoO0cDMNdIFTXnkbW4Tg8GEeTjtex
NVOSRZpmoeazDMeQ4FKdwIO+GEYWlCwXmKUqKjQsFNeBViCDFJqvqKOV4nK9
lq9VSgRWIUms2cgvbAsUD0iEDk+V0YFEZFjoBFwhVSykyyVgVqZSSeQLiQI8
LiXzxfvrT+6tIWZ9vbR08xYC6+HayjaqADsbgBSYF8ggWNViUXgxE4jm2xcN
K432zBRKxXKlUK2CwJYbdB6n8mgHNZHDIbQ3SziCjFUUXpMZQ+M01W37difU
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
PH3JCtMpP53wU9MzNIBlSCighmdCFb3Ecwks1F9qfNQArDmcbZHCLyFDzrJm
1bW4O5t1s+zSOj+Or5VlW9ue7YVuVIQpjZb6tq+uVuVuu7zdobzN7nCjuvrl
bvvlYfv5dvn1fvf9sH5aze7b7HGeb6Basf00yx+b7PfjxqvXTfe6nr3ezsGm
L4dbMOv1Yb+BBU19BCBTE21TjULd88w4cZpZtuzA9XxWRvM2iX2zzNwq92dV
uIK45W6dgGthV6V43JoUIhkTWKGLXIWcWJdZniOS+fhXmyar6DdKoJVBgnDs
IRvYoWdHtmJbjCz8SFisoqBycfrxoaFGajqHXKRpeFdtX9BtGAUUrOF0enrx
iTajfngPbwGwwKzzs/f94XGwqT+k3f4DSOKIBpVY2vLA0LoblLspKzA8dW9l
eIGlHgs8gwdGgzs1ZNU2dd/yU2rL7EZu3sRZFWVNBEGoujytk6zJwiwCOs1y
hjADZlVzWu2f17RCMilzJ3LDKsavlsCfhbYfO7OuutvvqiqDd1vU2bzK52X2
uJm97lZPy9nn/frb3eZ5WR/abB17D1X+1JWPs/L7bvF5PXtezx5X1dfd+o/H
w38+v/75/IBgNScGw7Mqlsr5nl4XSQIiI0llybyrqjwIfTOw1chTyzSsiwhe
4u5+vVmCMTFgXhxX43dlUkRIvX58nL9Kcj9NQsr19K2Q6/0akGc+9CGMfYiM
F/tRHuK3U2hmH9KncLLM/cCLvoSp0DidcixP27ENzfFFzRRkbcQJ/Qlz+uni
5MOHdx8+/Pzmt7/89PObt2/Ozt/3x8f11uQujr0a4AZZlqNd+lN2OuGYCc+O
2eNCD55nOJGj9k08Z/mmbquyKcuOqrmGl3o+jVO7WQ2ChHEZFeBXm0PlAVYM
rajL2XZR496vZvWigbWC5Uir0vQdJ8LLC6owzBMn8JIszkHE+axpacXydjlf
zZpFk83LEgbjZT1/XXfbKn+YVfsqAqfu2/SlLZ/mxeuqe5zX+BeeN8unZffH
4933x4fvTw8rmOssKVPf1iRdEz1HW8GE11kUBRUCF22/Stwj6QLXTHwr8g24
iPWq3CxLWCGkCWA3q+CG0sA2aRWn59CIBS4CN4kCABQmjhuaQD0royj1Anp0
nRCkKxM78hTXQexF5gVMjKLQBIosMzLiq8zQoAMk0eBNXTZtTtEQbhlJAV5n
F5eg1cnph59+++UvP//09s0vZx/e9Ub9o3WnakVgTUYThoXrE6ipDIt3xG5K
4RJsO8NJhBfDT0wCS5FMSTuCBXcBpOwIYMVJGSZVlFdpDJech7NFi0RMjRb3
u9l6nVHnpgaqEZaFF4e6azqQlSSE80/qwsMjf1yP19Dehfmya3eLxW45R9Vo
s+h+1X3Zr26bsg2CLnb3ZXBbJY/z4tBkX5btn3vQbf77Yf/1dv9ls37ar4DU
wxZ3vdh2bRWjIsm6zAe+QYMPDRnxpinxUKRZ6Nqa62g0cluk8RGCPHGbIoH9
KxLCtGsKvAe24yL9h25I++Z0z6UmcFC8EIU3cWMYxcwr2hhguZHnxV6cxUEc
SLY9FkRUpamksIpKA4CSNJElGPWJKE4UUAyGEDbehQaKGjKtxsoydUUjg3H2
t19/+QtN6/9C0/qjY8f98Q+wBtR1VRQliTqiKbJ8bJ8syjSUIQAyXgF+7ISf
6J6pW6pqyhBDzdGtyLVDB7GiaPIMRbaJSuTEeVXMisV20a3ni+2q225AlayB
eWqjorB9ZJAfXQpxjxKkrLiprDCmdlcQ/goiOVtCBleArLtbr24X87tu9vV2
t0zT0re70CstAzbjZbV8WbTg1P2s+nK7/R+Pj7/fbZ/Xi/tl87jC++KwWO/n
S9R811ANRQIpStpD1rZN1RF/QXsf7i4OnCTygSrtnC2yIodjjdLAC3wrTyKw
hgagU5pv9F3q0kS96m3L846t4EIIQhDlfpjafmQDNcuzrdAJIvx5F558wPEj
mmSU4PfGgjzixWP4FUdADVyTVRQvzXUlGk40JIOS1/Xg5vTs9P0ZgfW3n356
f/L24tOHYwPjMZweWQqWkFIUFf9VNEXXFQCO6AakRInjJY5yFgSSG+ueoRiK
osuapWm2Yfm24Rimb1ezopgX1byExNeLuppX3WZRdx2iVr1ZVYu5gzSVFNBn
/EgaHtMoRNbQ01iLqUuIFYZRVcYV4tgib+rVcr1Zb+62u4fN+mV///Xu7vfD
7Zf9tkvifZ1viugwyz8v5/dV3kUetPFls/q82T6tgOzssIC9X365v39Yr9dN
W4SRZ+gwaMdmKnFR5Sn+L4rKnBpipzHNs+GDBnGwAjghFTn485AG3qMAaT1G
Da1o+2pKttyxLMvQTM2xTM+zwtRNcjh52D/bCEzYdcMxoZjURdxzQZkf6EyQ
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
               "], 
               "Byte", ColorSpace -> "RGB", Interleaving -> True], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]], "Type" -> 
             "Image", "Version" -> {11.3, 0}, "ID" -> 7263179337424669307]], 
           MachineLearning`MLProcessor["ConformImage", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]], 
             "Example" -> Image[CompressedData["
1:eJztyDEOgkAQBdANNpZewVvYWtpiPACEhWixJguJ8QYcm+EWFO8lf/L/XPtv
OzYppfkcp+1+91q7//MS41Xm91Ty8ChLnnK99ad4fiJrZO8AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDxbeYJDVE=
               "], 
               "Byte", ColorSpace -> "RGB", Interleaving -> True], 
             "Version" -> {11.3, 0}, "ID" -> 3372683120052373349, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Image", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["ImageExtractNumericalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Forbidden", 
             "Input" -> Association[
              "f1" -> Association[
                "Type" -> "Image", "Weight" -> 1, "Dimensions" -> {136, 106}, 
                 "Channels" -> 3]], "ExtractorName" -> "ImageGeneric", 
             "ExtractorVersion" -> "V1", "FeatureNumber" -> Automatic, 
             "Version" -> {11.3, 0}, "ID" -> 9063821730800648342, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5408312798742616076]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Harry" -> 1, "Hermione" -> 2, "Ron" -> 3]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             1641343758175321872, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2577247855274162859]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "Harry" -> 0.3333333333333333, "Hermione" -> 0.3333333333333333, "Ron" -> 
        0.3333333333333333]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
    "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association["Weights" -> CompressedData["
1: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
iW2HAg==
            "], "Biases" -> 
           RawArray["Real32",{-0.013009858317673206`, 0.00289594242349267}]], 
         "Parameters" -> 
         Association[
          "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 1024,
            "$InputDimensions" -> {1024}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.6066197678728488, 0.25774472105204466`], "Accuracy" -> 
         PlusMinus[0.6410256410256411, 0.2003890415327618], "EvaluationTime" -> 
         0.0005695833333333333, "TestSize" -> 12, "TrainingSize" -> 48, 
         "TrainingTime" -> 0.125918, "TrainingMemory" -> 2688904, 
         "ModelMemory" -> 18296, "ExperimentCount" -> 1, "ModelUtility" -> 
         0.6562728799482754, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.6066197678728488, 0.18225304007093587`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.6410256410256411, 0.14169645014328858`]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.1, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 60], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 31181622228703]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.470823366974351, 0.3185193626317091], "Accuracy" -> 
              PlusMinus[0.457516339869281, 0.0995525896191362], 
              "EvaluationTime" -> 0.00018128, "TestSize" -> 50, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.061373, 
              "TrainingMemory" -> 1594264, "ModelMemory" -> 18296, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.28147981526504323`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.470823366974351, 0.2252272012560985]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.457516339869281, 0.0703943112043727]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6066197678728488, 0.25774472105204466`], "Accuracy" -> 
              PlusMinus[0.6410256410256411, 0.2003890415327618], 
              "EvaluationTime" -> 0.0005695833333333333, "TestSize" -> 12, 
              "TrainingSize" -> 48, "TrainingTime" -> 0.125918, 
              "TrainingMemory" -> 2688904, "ModelMemory" -> 18296, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6562728799482754, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6066197678728488, 0.18225304007093587`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6410256410256411, 0.14169645014328858`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0005695833333333333, "MeanCrossEntropy" -> 
             PlusMinus[0.6066197678728488, 0.25774472105204466`], 
             "ModelMemory" -> 18296, "TrainingMemory" -> 2688904, 
             "TrainingTime" -> 0.1369238], "Index" -> 1], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3373712870028633`, 0.1943587154721883], "Accuracy" -> 
              PlusMinus[0.4379084967320261, 0.09907183977620504], 
              "EvaluationTime" -> 0.00001724, "TestSize" -> 50, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.006192, 
              "TrainingMemory" -> 204592, "ModelMemory" -> 87832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3138508306677834, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3373712870028633`, 0.13743236569309109`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4379084967320261, 0.0700543697303817]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.793075302213826, 0.10222573623965624`], "Accuracy" -> 
              PlusMinus[0.6410256410256411, 0.2003890415327618], 
              "EvaluationTime" -> 0.0000435, "TestSize" -> 12, "TrainingSize" -> 
              48, "TrainingTime" -> 0.007743, "TrainingMemory" -> 1267832, 
              "ModelMemory" -> 399464, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.5309262199451225, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.793075302213826, 0.07228451130684832]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6410256410256411, 0.14169645014328858`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000435, "MeanCrossEntropy" -> 
             PlusMinus[0.793075302213826, 0.10222573623965624`], 
             "ModelMemory" -> 399464, "TrainingMemory" -> 1267832, 
             "TrainingTime" -> 0.010837799999999998`], "Index" -> 2], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[106.08279059323861`, 27.398541131701098`], "Accuracy" -> 
              PlusMinus[0.4771241830065359, 0.0998801904704068], 
              "EvaluationTime" -> 0.00265038, "TestSize" -> 50, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.101641, 
              "TrainingMemory" -> 1169904, "ModelMemory" -> 747048, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.003437723006805086, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[106.08279059323861`, 19.37369422884439]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4771241830065359, 0.07062595998782863]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00265038, "MeanCrossEntropy" -> 
             PlusMinus[106.08279059323861`, 27.398541131701098`], 
             "ModelMemory" -> 747048, "TrainingMemory" -> 1169904, 
             "TrainingTime" -> 0.16262559999999998`], "Index" -> 3], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.4439062686737518`, 0.13814707692825984`], 
              "Accuracy" -> 
              PlusMinus[0.28104575163398693`, 0.0892511333338184], 
              "EvaluationTime" -> 0.00001166, "TestSize" -> 50, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007423, 
              "TrainingMemory" -> 198976, "ModelMemory" -> 5480, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.29352951904724317`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.4439062686737518`, 0.09768473489707216]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.28104575163398693`, 0.0631100816089277]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.5556272115733498`, 0.5193826530260404], "Accuracy" -> 
              PlusMinus[0.4102564102564103, 0.19810460796039017`], 
              "EvaluationTime" -> 0.00003566666666666666, "TestSize" -> 12, 
              "TrainingSize" -> 48, "TrainingTime" -> 0.031654, 
              "TrainingMemory" -> 822976, "ModelMemory" -> 5480, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2602821194403297, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5556272115733498`, 0.36725899598537287`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4102564102564103, 0.1400811116730944]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003566666666666666, "MeanCrossEntropy" -> 
             PlusMinus[1.5556272115733498`, 0.5193826530260404], 
             "ModelMemory" -> 5480, "TrainingMemory" -> 822976, 
             "TrainingTime" -> 0.026415400000000002`], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1027947979229369`, 0.027103758495818916`], 
              "Accuracy" -> 
              PlusMinus[0.3398692810457516, 0.09426277844350309], 
              "EvaluationTime" -> 0.00018266000000000002`, "TestSize" -> 50, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01571, 
              "TrainingMemory" -> 188960, "ModelMemory" -> 85056, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3897572872726502, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1027947979229369`, 0.019165251428036052`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3398692810457516, 0.06665384985088614]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0524946949690575`, 0.08773112776525692], "Accuracy" -> 
              PlusMinus[0.6410256410256411, 0.2003890415327618], 
              "EvaluationTime" -> 0.0003476666666666667, "TestSize" -> 12, 
              "TrainingSize" -> 48, "TrainingTime" -> 0.014197, 
              "TrainingMemory" -> 611792, "ModelMemory" -> 86400, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.40366208356748295`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0524946949690575`, 0.06203527536395657]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6410256410256411, 0.14169645014328858`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0003476666666666667, "MeanCrossEntropy" -> 
             PlusMinus[1.0524946949690575`, 0.08773112776525692], 
             "ModelMemory" -> 86400, "TrainingMemory" -> 611792, 
             "TrainingTime" -> 0.0242282], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.098570332912235, 0.0227885584595269], "Accuracy" -> 
              PlusMinus[0.3202614379084967, 0.0927850033594967], 
              "EvaluationTime" -> 0.00040338, "TestSize" -> 50, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.048174, 
              "TrainingMemory" -> 1594384, "ModelMemory" -> 18296, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.39155776165160955`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.098570332912235, 0.016113944220197532`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3202614379084967, 0.06560890506791671]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0983008969266184`, 0.08736069771574592], "Accuracy" -> 
              PlusMinus[0.5641025641025641, 0.20413962971101585`], 
              "EvaluationTime" -> 0.0005543333333333333, "TestSize" -> 12, 
              "TrainingSize" -> 48, "TrainingTime" -> 0.039433, 
              "TrainingMemory" -> 1993128, "ModelMemory" -> 18296, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.38712020154601495`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0983008969266184`, 0.061773341763992066`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5641025641025641, 0.1443485164775701]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0005543333333333333, "MeanCrossEntropy" -> 
             PlusMinus[1.0983008969266184`, 0.08736069771574592], 
             "ModelMemory" -> 18296, "TrainingMemory" -> 1993128, 
             "TrainingTime" -> 0.0718338], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.0614995591240604`, 0.7898488696106292], "Accuracy" -> 
              PlusMinus[0.4771241830065359, 0.0998801904704068], 
              "EvaluationTime" -> 0.00013110000000000002`, "TestSize" -> 50, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.051413, 
              "TrainingMemory" -> 1594384, "ModelMemory" -> 18296, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.13416449137591674`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.0614995591240604`, 0.558507491814205]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4771241830065359, 0.07062595998782863]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3198083996537824`, 0.7272445562647712], "Accuracy" -> 
              PlusMinus[0.5641025641025641, 0.20413962971101585`], 
              "EvaluationTime" -> 0.0010068333333333333`, "TestSize" -> 12, 
              "TrainingSize" -> 48, "TrainingTime" -> 0.194923, 
              "TrainingMemory" -> 2695848, "ModelMemory" -> 18296, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.29427083908095414`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3198083996537824`, 0.5142395573158214]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5641025641025641, 0.1443485164775701]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0010068333333333333`, "MeanCrossEntropy" -> 
             PlusMinus[1.3198083996537824`, 0.7272445562647712], 
             "ModelMemory" -> 18296, "TrainingMemory" -> 2695848, 
             "TrainingTime" -> 0.1683668], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0256854356258487`, 0.0853603678905279], "Accuracy" -> 
              PlusMinus[0.4183006535947712, 0.09843569707531123], 
              "EvaluationTime" -> 0.00020044, "TestSize" -> 50, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.098124, 
              "TrainingMemory" -> 1600552, "ModelMemory" -> 18296, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4142271158973815, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0256854356258487`, 0.0603588949799707]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4183006535947712, 0.06960454891277737]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6933541395868511, 0.1328296983203895], "Accuracy" -> 
              PlusMinus[0.6410256410256411, 0.2003890415327618], 
              "EvaluationTime" -> 0.0009538333333333332, "TestSize" -> 12, 
              "TrainingSize" -> 48, "TrainingTime" -> 0.164961, 
              "TrainingMemory" -> 2688904, "ModelMemory" -> 18296, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5999806404176198, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6933541395868511, 0.09392478042531076]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6410256410256411, 0.14169645014328858`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0009538333333333332, "MeanCrossEntropy" -> 
             PlusMinus[0.6933541395868511, 0.1328296983203895], "ModelMemory" -> 
             18296, "TrainingMemory" -> 2688904, "TrainingTime" -> 
             0.19710060000000001`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8909211412095472, 0.42053647796111443`], "Accuracy" -> 
              PlusMinus[0.5641025641025641, 0.20413962971101585`], 
              "EvaluationTime" -> 0.0005417499999999999, "TestSize" -> 12, 
              "TrainingSize" -> 48, "TrainingTime" -> 0.163155, 
              "TrainingMemory" -> 2689032, "ModelMemory" -> 18296, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.44300070837915984`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8909211412095472, 0.2973641953026111]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5641025641025641, 0.1443485164775701]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0005417499999999999, "MeanCrossEntropy" -> 
             PlusMinus[0.8909211412095472, 0.42053647796111443`], 
             "ModelMemory" -> 18296, "TrainingMemory" -> 2689032, 
             "TrainingTime" -> 0.261048], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 10]], 
        
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "LogisticRegression", "NaiveBayes", 
             "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 31177327261407]], "MaxTrainingSize" -> 60, 
      "LastReportingTime" -> 3.757182941974914`16.327437331084106*^9, 
      "PreprocessorEvaluationTime" -> 7.67822265625`2.*^-6, 
      "PreprocessorMemory" -> 94056, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.7999999999999999, 
          "ElapsedTimes" -> 0.7888240000000001, "ExperimentCounts" -> 8], 
         Association[
         "TrainingSizes" -> 48, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          0.9608050000000001, "ExperimentCounts" -> 8]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[31185917195999]], "ID" -> 31190212163295]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association["Type" -> "Image", "Weight" -> 1, "Values" -> {
             Image[CompressedData["
1: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
9Ri8oKnXzMq6AelYqijgiSpy3OMsiYazyXjU40WzpuNFmaLi4nQ2Fi2SJI/J
xBnMHNqBgBqTBlLgabuLlkOUkrIGa4VYu6O4n5jqjjdPruo3r6Tn9JLOqd6K
wQSpDiq6bLZ4MAiM/G6naKU5lrSJEFIW1QZLGxWHiLpfSxD6AuLORbM/eHjd
WxsW7L1t8st3TP1055JDT9917PlNh5/b9Onjdy8c0mwliLiLh/lEwU8ijXI5
jHhQScXoOkBq+UOYCIJyB8rHTr1l7tIdUxZsnrF41w03bfGH0/kUA4wgdND0
vNcCQDgIlVPLkxyn8hYOvDCpFYZeBchsgsopbj9IBIC0utxsRU7f8gDlQvfP
AQordkiWT3HDY9hcUdFbYgs3SIl2Z0l/R/GAcO24ugGLuyfc2WPYLZn6Cb5o
czqark5FsuEAMIq5XcWRMAASLJZ4KBYNxyKhuFsJwPDD9jOM7PaF4bT1lFld
3Cw4xEDGX9Ze1DyitGuaq3xIqGF87eAlpb3nCkX95OIBwIvQKkAWll7meb9L
ncGxMmaaMlitZo5Ta0mYJsnG6QsJ0qCtr67YtnrZew/e/fF9t354z5I/bJr7
+l0z31x/wwc7Fn/68MrXty25oV8tRxA+gXRJApSftjkNnIMWXIzgyAPEsEIO
IHWMkeVdWrOtQC+39Bw74YY7azunJatGeuLtJtqWTy7gEQCC0GEH+QgkAmUA
ENrwuouDrAEgRB4CnC+IEvQNUVCoh8qpKKpFqIpRTt+0/xIgr030SnaPw60o
IacvjYzjK+4ZqBwUqB7uLh+eaJnSNXbViNlbe42+rah+rDfSVJOt6aqtqs+o
6wadrCXqVuI+v1MUwUGn7HLYFd4qGYw0wuUKZitq45kMEryOZtF7HeESuLWG
7qktQ+d1jVtRP2xR3ZDFxT1nFbVP7TNpddOgxYQ5YuG8pJlFl7fbnA67DK/I
UAbOYrCYC2gTYedMNsaA7FMc9t95y01P7rj7493rPn901ReP3KbGQ8s/vvfm
t7fOfWXDnJe3LL51UrdYSDAaAkZIHU9zKqTNRQtuBMXLJG8zW/NlBYtiR2O0
UKyTICyRVF1FfT9CYycK7YRWhIsDEMDlOiLgDgDKg6X6/1xWylNMHVmk1Nls
QKBO+Vg5dR2wJPOCHQABQnWu3ELnPqImIKM6N67V5BPZP9jaaT7qDof8CUkK
OL2lpfUDq7smphpHNw1a2DR0cf9paxoGzK/pObOu1wwl0RFKNkT80YTPE4Yn
EHknzzltvEMQRI7NrdxR10vA/8OuoM6FQ/AGQakUZ5Nx+yZKFKWA4k17I1X+
dHNDv0k9xy3uM3nZ2MVb56/ZM3v5Q11Db7F5WzTmsIEOMEJE8RQFAimP4hU5
C2MsZHQEnBYYkZItK6aPefuJ+1+8d9P7e3Z89Ojqr59efWjvusMvrD/64rrD
L6799pk7P3l85avbF+1aMSVqI2xmwi6QvMjqLDRIJCpxWvQbRYVyuUyoNC1G
wqhRV5ObaaPJglSDgG3Qm00FpAaBnWuFv9F8bQDNRKoDYjpDvozJ7+Oc3ILZ
awMT2HJWAQ5BcXuxo9Hq8S5Ow44h5wXzcwqqSzfpNChdfrPVmfXa3OCaYnV4
bR4b7+at3mRx68AxC8bOuav/pJXDZq3rO+UObFuHLKjvnjF06m31XeMJg8xQ
vIOzgjLIO9AiGqUB/pDeoAOBc3P16FQ2h9NsYeCrAY06emO1wzPA35ImwWwU
bY5wqKgumG1pGjxlxNzbZ6+6b/6qB0dOW1NSPdpoKbEp1aQ1qTN79SaHyWAl
9RRPmhQrRRNEQ8J794IpL9+7/ssXHvv21SffeWjbW/fd/fVzG7/bu+7g3rUH
n7/70At3A6ADz9312ROr3nv4tn0v7VwwrlMwEBxJIJHRVgsryjTv01EughIK
OK5AYAtESivSpI0FEOpAByptkxlZBb4btZaGItSEkhulzE/fXAfo2njaL2Dl
Fyqg5VUttbC5Xio4nCh84BCCLsWDD+pzvi1/Wn5fdenqvL/ut6HNAYQIK/4w
CCH7HY5waVXnyClLZi3bNnXpthkr7h+7YPPkm3bccOt905duvXXTnhmL1mko
xcqpa/aiQfhfn1OyC1Ye5aTFwhJEITIlbgFpEReGiyyEa2F5cEdjgMijbJcs
lExRdppTWDlKUM7yzqGTl6ydvGR926CZUHtOqnD7Gp1KOW0JmIwOjnFJrGQ1
mgS9xk3rbpoy4pG1y/7wxM5Pf/fwH5++/6uXdp98/7XvXnr0299t/37v5kO/
23h476aTr2w9/dr2H/Zu2LdnzQcPr/rjE+svff3Gw+uXN5clYflQXCsun8kk
cqLP4YvIoYDV5zA7WILWEhp1FW4OIEsOIL0xDxAJgIzXJm5yBEEY8yYgF/89
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
6NnNh1+6//Nndnz1yuM//fDlf1w+8eOZI3+6cPLn88fUuHD0T+cRR/5y/tBf
zx366/mDfzn9Lbb/dv7wX88d+fnM96cP7fvi/dffeP7Rj194HCns/cc273tm
58ePb/72xUde3rnOAoB0GoCBTKoxo25VtVodvtHpTb/4t+vipj6nyVqhZqpT
1egK84MIBhMM23X65BY6OXA+AMK7+Ah28nkKB3EyXubfUglovFbAqoyz5LIb
/F1OAPF3QR8rx9jt9srK6t59+ja1dUSSGdHlRylvlX16WiwwcybWTugoVvJ0
9R81fNKi0TOWjZu5YtjEhT0HT23qGlHTOqC2tV+P3sOaegwor26LpcpD0XQw
kvT4Y5LL7w5mlEAaVafdEROFoIVVVNGzSFA2LcsWknrGSpoKCTetuWnckL0b
l3/+0KqjT991/uWt51/YePKZtcefugtx5Km1P/xu24Hf7fxq7/2H3nvhp+P7
/3rp5I/nT16+cPLSpVOXLp24clGNqxePIX66eDQXR368cPjq2cNXzx/By4un
D379xXvvvPLUxy8+8tVLD36ye/N3z+/68tGNR1569JMnd9VFXKyuQAXISBaS
yEkqQOpacrXHm43/E0bAAgUFGhMAgQs4J0+rPInwFvACjnlly5+Qt3953cR+
3t2pC0gs6hMbyN2qzSzQoqCkUJ5o1altHPd4PBzHSZKcThcXl2TtLo+JZklW
MCMlCQ5kBvQoipMIPYVteV2Pyqb+dR3D2/uM6+w/obX36LrWwWW1vZBTgvFy
2ZPg7H7Amn8Wj+FdNOdgbF6KV0jaYSLtFCljqzfbCoysgeM1NKWn9erMNkFU
R+Sti6a9svGWzx5YfuTJO87+bv2Z5+46/uTqY3vuOLrnzsNPrjnx0s79z2w7
9Pvdl7796OdTB3++ePLHy+fOnT914dLZC5fP5OLUxUtqAC/E1aunL148fv7s
oXPnDl+9evLKlROHD3/12YevfvLSw/t+d+/nezZ//9w9Xz549+Fnd33z/INT
+7ZaNASERUPShTSjpdTxbbP63IXe8Eu9c71QzWcit8cnO1wAC0QgCjR4C5oG
aHAQ9AFAeOu63wOIeRnMUyZfSakfJLRaA0Vo0AAGWEaYYSPNaw0WosBgJK3w
XYTG7HK5bTa7LDv9vxS8qGiAkZlkSQuvMzLAiGRtOBmf9UaKZU9aCZaHkrWJ
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
sAWL5UDaGy0NJsogViBXoYEu0FkIvaWmudddm+/fsOMRbFdv2DV9ztLlqzbN
v/mORUtWj5kwe9S4mWMnzgY6K1auXb58zfbtDy1cuKy7e0hpSXVtbWtzW1d9
c1tHr+7K2gakA2zHTZo6Ysz4wcNHjRo3cfT4SaWlxTU1VY2N9YiWlpYePXq0
tXc0NDbjTJAiEk/DE8IcIsKJYt7ullx+weVBL8qnMJQ8qM7g03Rm9bfmsIOA
nUMygp3zBIKRaBxZFRKXioWttNmoLQBhYRJg5ExmRpYcXptQ4hb7ZYOod97f
ftOXOxZ/9+At3z9+5/s7lt05oe/uu2/+4eO3vvvo7YNffvL9N18dOXzg+LHD
J08cAUZnTx0BRnlorqNz+dyJfOBIHpRTRw+eOPLdsUPfHDnw1ZH9X3z++9f2
bl37/rZlUFH8oc8fXb3l1gUlJdloZZtS0mKPVljdcRPrKDBadRYP5UraY3XO
ogZ3uklJ1brjlb5ERShVGSmqDMSzhIbEmcXVLTPnL9+w89GV63bctfWB2+7c
umzVhrs33T9/yaqpMxePHDtj3KQ5S5bfOWHy7HkLb5k7d+n27Q+MGTOlq2ff
2pqWmtqmanTyWBI92RuMwGz06NkHNeyAIcMRYyZMnjJjVnFJqjSbxjYWD/n9
XqfTaeVFdZAg18g0K/7fys47uqkDTfuZmWRICKEZY3DvVrFs9S5Z1eq9S1az
ZEmucsfdxhV3AwaDaaE7IYFkw2TIJJlMMumEEMC4N7CNgUBmdr+yZ//bV9F+
OXO+3ez5Pp+Xe+69sg8++ul53+e5zTsjo7dG7N21NyE6PiNyb3JiRnYiMguJ
pYI5zMmVk5g8CKQvbHothOalV1548eWQf3tt+29eevm3v38lcm80AIqOjs5I
T83CoKMidkLmC92M85sXQx+/F1/dExWbkZRESo0VYeJP1hd8OFx98+i++Qtd
9852//X4/g6XYmKodem7z+5+9en9W99O3b0zOzO1sDiztDizvDS7ujL76OHs
k/UFqKePFsP148ZSuMKbj9fm11amF2d/mJm8OfnDV1O3vvxw4sK1oa4vjrTA
/wKMvr80eLi9AVIJlq9PZKijMnO2JmS/Epm2aVfqa3HE3Sgeim1EsLQophbN
VqEZMiQ5N4uSS2RKYlKySGyRw1dhzS+VaPKkepfJXVrbNtAzdGzw4PiBgbGm
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
              "], 
              "Byte", ColorSpace -> "RGB", Interleaving -> True]}, "ID" -> 
           2388477106615774462]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 14.301003, "MaxTrainingMemory" -> 31068720, 
      "DataMemory" -> 2473496, "FunctionMemory" -> 284416, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 1, 22, 21, 55, 42.551434`8.381489178265783}, 
        "Instant", "Gregorian", -8.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.757211742579809*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"f145ef00-ba15-41b8-b7f0-7878862b2326"]
}, Open  ]],

Cell[CellGroupData[{

Cell["With a Camera", "Subsubsection",
 CellChangeTimes->{{3.7572117515900087`*^9, 
  3.757211773193886*^9}},ExpressionUUID->"082e8d48-402a-4f3c-9874-\
b538d681b723"],

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Text", "[", 
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<Which Harry Potter Character Are You?\>\"", ",", "Bold", ",", 
         " ", "18"}], "]"}], "]"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"Dynamic", "[", "image", "]"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Text", "[", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"Dynamic", "[", "character", "]"}], ",", "Bold", ",", " ", 
          "18"}], "]"}], "]"}], ",", " ", 
       RowBox[{"Button", "[", 
        RowBox[{"\"\<New Photo\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"image", " ", "=", 
           RowBox[{"CurrentImage", "[", 
            RowBox[{"ImageSize", "\[Rule]", "350"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"character", " ", "=", " ", 
           RowBox[{"potter", "[", "image", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"probabilities", " ", "=", " ", 
           RowBox[{"Normal", "[", 
            RowBox[{"potter", "[", 
             RowBox[{"image", ",", " ", "\"\<Probabilities\>\""}], "]"}], 
            "]"}]}]}]}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Text", "[", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"Dynamic", "[", "probabilities", "]"}], ",", " ", "14"}], 
         "]"}], "]"}], ",", " ", 
       RowBox[{"Button", "[", 
        RowBox[{"\"\<Turn Off Camera\>\"", ",", 
         RowBox[{"DeviceClose", "[", 
          RowBox[{"First", "[", 
           RowBox[{"Devices", "[", "\"\<Camera\>\"", "]"}], "]"}], "]"}]}], 
        "]"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"Frame", "\[Rule]", " ", "True"}], ",", " ", 
   RowBox[{"FrameStyle", " ", "\[Rule]", " ", "Thick"}]}], "]"}]], "Input",Exp\
ressionUUID->"d43e7c34-d03e-456b-91e8-74d804f25285"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Without a Camera", "Subsubsection",
 CellChangeTimes->{{3.7572117515900087`*^9, 
  3.757211777819138*^9}},ExpressionUUID->"66c6103f-15a3-422e-9e2e-\
1413ec376bfc"],

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Text", "[", 
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<Which Harry Potter Character Are You?\>\"", ",", "Bold", ",", 
         " ", "18"}], "]"}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"Dynamic", "[", "image", "]"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Text", "[", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"Dynamic", "[", "character", "]"}], ",", "Bold", ",", " ", 
          "18"}], "]"}], "]"}], ",", 
       RowBox[{"FileNameSetter", "[", 
        RowBox[{
         RowBox[{"Dynamic", "[", "file", "]"}], ",", " ", 
         RowBox[{"Appearance", "\[Rule]", "\"\<Select New Image\>\""}]}], 
        "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Text", "[", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"Dynamic", "[", "probabilities", "]"}], ",", " ", "14"}], 
         "]"}], "]"}], ",", " ", 
       RowBox[{"Button", "[", 
        RowBox[{"\"\<Classify Image\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"image", " ", "=", 
           RowBox[{"Import", "[", "file", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"character", " ", "=", " ", 
           RowBox[{"potter", "[", "image", "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"probabilities", " ", "=", " ", 
           RowBox[{"Normal", "[", 
            RowBox[{"potter", "[", 
             RowBox[{"image", ",", " ", "\"\<Probabilities\>\""}], "]"}], 
            "]"}]}]}]}], "]"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"Frame", "\[Rule]", " ", "True"}], ",", " ", 
   RowBox[{"FrameStyle", " ", "\[Rule]", " ", "Thick"}]}], "]"}]], "Input",Exp\
ressionUUID->"006ddb74-32f7-4cec-b269-4eedab9f6018"]
}, Open  ]]
},
WindowSize->{808, 655},
WindowMargins->{{60, Automatic}, {Automatic, 24}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 7, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[422, 15, 955, 21, 304, "Input",ExpressionUUID->"a5eee5d1-0a2f-4f34-8fc1-29be8facca88"],
Cell[1380, 38, 121905, 2100, 62, "Output",ExpressionUUID->"f145ef00-ba15-41b8-b7f0-7878862b2326"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123322, 2143, 166, 3, 45, "Subsubsection",ExpressionUUID->"082e8d48-402a-4f3c-9874-b538d681b723"],
Cell[123491, 2148, 1989, 50, 199, "Input",ExpressionUUID->"d43e7c34-d03e-456b-91e8-74d804f25285"]
}, Open  ]],
Cell[CellGroupData[{
Cell[125517, 2203, 169, 3, 45, "Subsubsection",ExpressionUUID->"66c6103f-15a3-422e-9e2e-1413ec376bfc"],
Cell[125689, 2208, 1940, 48, 220, "Input",ExpressionUUID->"006ddb74-32f7-4cec-b269-4eedab9f6018"]
}, Open  ]]
}
]
*)

